#!/bin/bash

# LangGraph Self-Hosted S    echo ""
    echo -e "${CYAN}📊 Redis:${NC}             localhost:6379"
    echo -e "   ${NC}Caching & session management${NC}"
    echo ""
    
    print_info "Run './start.sh dev' to start the agent development container"
    print_info "Run './start.sh logs <service>' to view specific service logs"
}

# Show banner with service information
show_banner() {
    echo ""
    echo -e "${PURPLE}================================================${NC}"
    echo -e "${PURPLE}🎯 LangGraph Self-Hosted Stack${NC}"artup Script
# This script helps you start and manage the LangGraph stack

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Show banner with servi    print_header "🚀 Ready-to-Use Access Points"
    echo ""
    echo -e "${CYAN}🎨 LangGraph Studio:${NC}  http://localhost:2024"
    echo -e "   ${NC}Build & test agents visually${NC}"
    echo ""
    echo -e "${CYAN}💬 Chat Interface:${NC}     http://localhost:5173"
    echo -e "   ${NC}Interactive agent testing${NC}"
    echo ""
    echo -e "${CYAN}🔍 Qdrant Dashboard:${NC}   http://localhost:6333/dashboard"
    echo -e "   ${NC}Vector database management${NC}"
    echo ""
    echo -e "${CYAN}📈 LangSmith Tracing:${NC}  http://localhost:8000"
    echo -e "   ${NC}Execution monitoring & analytics${NC}"
    echo ""
    echo -e "${CYAN}🔧 RedisInsight:${NC}       http://localhost:8001"
    echo -e "   ${NC}Redis GUI & management${NC}"
    echo ""
    echo -e "${CYAN}🗄️  pgAdmin:${NC}           http://localhost:8080"
    echo -e "   ${NC}PostgreSQL GUI & management${NC}"
    echo ""
    echo -e "${CYAN}🐘 PostgreSQL:${NC}        localhost:5432"
    echo -e "   ${NC}Agent persistence & checkpoints${NC}"
    echo ""
    echo -e "${CYAN}📊 Redis:${NC}             localhost:6379"
    echo -e "   ${NC}Caching & session management${NC}"
    echo ""banner() {
    echo ""
    echo -e "${PURPLE}================================================${NC}"
    echo -e "${PURPLE}� LangGraph Self-Hosted Stack${NC}"
    echo -e "${PURPLE}================================================${NC}"
    echo ""
    echo -e "${CYAN}🎨 LangGraph Studio:${NC}   http://localhost:2024"
    echo -e "   ${NC}Build & test agents visually${NC}"
    echo ""
    echo -e "${CYAN}� Chat Interface:${NC}     http://localhost:5173"
    echo -e "   ${NC}Interactive agent testing${NC}"
    echo ""
    echo -e "${CYAN}� Qdrant Dashboard:${NC}   http://localhost:6333/dashboard"
    echo -e "   ${NC}Vector database management${NC}"
    echo ""
    echo -e "${CYAN}� LangSmith Tracing:${NC}  http://localhost:8000"
    echo -e "   ${NC}Execution monitoring & analytics${NC}"
    echo ""
    echo -e "${CYAN}🔧 RedisInsight:${NC}       http://localhost:8001"
    echo -e "   ${NC}Redis GUI & management${NC}"
    echo ""
    echo -e "${CYAN}�️  pgAdmin:${NC}           http://localhost:8080"
    echo -e "   ${NC}PostgreSQL GUI & management${NC}"
    echo ""
    echo -e "${CYAN}🐘 PostgreSQL:${NC}        localhost:5432"
    echo -e "   ${NC}Agent persistence & checkpoints${NC}"
    echo ""
    echo -e "${CYAN}📊 Redis:${NC}             localhost:6379"
    echo -e "   ${NC}Caching & session management${NC}"
}
COMPOSE_FILE="docker-compose.yml"
PROJECT_NAME="langgraph-stack"

# Helper function for docker compose commands
run_compose() {
    if command -v docker-compose &> /dev/null; then
        docker-compose "$@"
    elif docker compose version &> /dev/null; then
        docker compose "$@"
    else
        print_error "Neither 'docker-compose' nor 'docker compose' is available"
        exit 1
    fi
}

# Helper functions
print_header() {
    echo -e "${BLUE}================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================================${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_info() {
    echo -e "${CYAN}ℹ $1${NC}"
}

# Check if Docker and Docker Compose are available
check_prerequisites() {
    print_header "Checking Prerequisites"
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed or not in PATH"
        exit 1
    fi
    print_success "Docker is available"
    
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        print_error "Docker Compose is not installed or not in PATH"
        exit 1
    fi
    print_success "Docker Compose is available"
    
    # Check if secrets.yaml exists
    if [ ! -f "../../envs/config/secrets.yaml" ]; then
        print_warning "Secret management file ../../envs/config/secrets.yaml not found"
        print_info "You can still run the stack, but API keys won't be loaded automatically"
    else
        print_success "Secret management system detected"
    fi
    
    # Check if .env exists
    if [ ! -f ".env" ]; then
        print_warning ".env file not found. Creating from .env.example..."
        if [ -f ".env.example" ]; then
            cp .env.example .env
            print_success "Created .env from .env.example"
            print_info "Please edit .env file with your configuration"
        else
            print_error ".env.example not found. Cannot create .env"
        fi
    else
        print_success ".env file found"
    fi
}

# Function to start the stack
start_stack() {
    print_header "Starting LangGraph Stack"
    
    print_info "Building and starting containers..."
    run_compose -p $PROJECT_NAME up -d --build
    
    print_success "Stack started successfully!"
    print_info "Waiting for services to initialize..."
    
    # Wait with progress indicator
    local wait_time=30
    echo -n "Waiting for services to be ready"
    for i in $(seq 1 $wait_time); do
        echo -n "."
        sleep 1
    done
    echo ""
    
    print_info "Performing comprehensive endpoint verification..."
    echo ""
    
    show_status
}

# Function to stop the stack
stop_stack() {
    print_header "Stopping LangGraph Stack"
    
    run_compose -p $PROJECT_NAME down
    print_success "Stack stopped successfully!"
}

# Function to test endpoint connectivity
test_endpoint() {
    local endpoint="$1"
    local name="$2"
    local timeout=5
    
    if curl -s --max-time $timeout -o /dev/null -w "%{http_code}" "$endpoint" | grep -q "200"; then
        print_success "$name: HTTP 200 OK"
        return 0
    else
        print_error "$name: Not accessible"
        return 1
    fi
}

# Function to test database connectivity
test_database() {
    local container="$1"
    local command="$2"
    local name="$3"
    
    if run_compose -p $PROJECT_NAME exec -T "$container" $command &>/dev/null; then
        print_success "$name: Connection successful"
        return 0
    else
        print_error "$name: Connection failed"
        return 1
    fi
}

# Function to test RedisInsight with enhanced verification
test_redisinsight() {
    local endpoint="http://localhost:8001"
    local name="🔧 RedisInsight (8001)"
    local timeout=10
    
    # Test basic HTTP connectivity
    local response_code=$(curl -s --max-time $timeout -o /dev/null -w "%{http_code}" "$endpoint" 2>/dev/null)
    
    if [ "$response_code" = "200" ]; then
        # Additional check for RedisInsight specific content
        if curl -s --max-time $timeout "$endpoint" 2>/dev/null | grep -i "redisinsight" >/dev/null; then
            print_success "$name: HTTP 200 OK - RedisInsight GUI ready"
            return 0
        else
            print_warning "$name: HTTP 200 but content not fully loaded"
            return 1
        fi
    elif [ "$response_code" = "000" ] || [ -z "$response_code" ]; then
        print_error "$name: Connection refused (container may be starting)"
        return 1
    else
        print_error "$name: HTTP $response_code (unexpected response)"
        return 1
    fi
}

# Comprehensive endpoint verification function
verify_endpoints() {
    print_header "🎯 ENDPOINT VERIFICATION - ALL SERVICES"
    
    echo -e "${CYAN}📊 Checking Docker Container Status...${NC}"
    echo ""
    
    # Check container status first
    if ! run_compose -p $PROJECT_NAME ps | grep -q "Up"; then
        print_error "No containers are running. Please start the stack first."
        return 1
    fi
    
    # Show container status
    run_compose -p $PROJECT_NAME ps
    echo ""
    
    echo -e "${CYAN}🔍 Testing Endpoint Accessibility...${NC}"
    echo ""
    
    local endpoints_passed=0
    local total_endpoints=9
    
    # Test HTTP endpoints
    if test_endpoint "http://localhost:5173" "💬 Chat UI (5173)"; then
        ((endpoints_passed++))
    fi
    
    if test_endpoint "http://localhost:2024" "🎯 LangGraph API (2024)"; then
        ((endpoints_passed++))
    fi
    
    if test_endpoint "http://localhost:6333/dashboard" "🔍 Qdrant Dashboard (6333)"; then
        ((endpoints_passed++))
    fi
    
    if test_endpoint "http://localhost:8000" "📈 LangSmith (8000)"; then
        ((endpoints_passed++))
    fi
    
    # Test RedisInsight with enhanced verification
    if test_redisinsight; then
        ((endpoints_passed++))
    fi
    
    # Test pgAdmin PostgreSQL GUI
    if test_endpoint "http://localhost:8080" "🗄️  pgAdmin (8080)"; then
        ((endpoints_passed++))
    fi
    
    # Test database connections
    if test_database "postgres" "pg_isready -U postgres" "🐘 PostgreSQL (5432)"; then
        ((endpoints_passed++))
    fi
    
    if test_database "redis" "redis-cli ping" "📊 Redis (6379)"; then
        ((endpoints_passed++))
    fi
    
    # Test Qdrant API (separate from dashboard)
    if curl -s --max-time 5 "http://localhost:6333/collections" &>/dev/null; then
        print_success "🔍 Qdrant API (6333): Connection successful"
        ((endpoints_passed++))
    else
        print_error "🔍 Qdrant API (6333): Connection failed"
    fi
    
    echo ""
    
    # Display results summary
    if [ $endpoints_passed -eq $total_endpoints ]; then
        print_header "🎉 ALL ENDPOINTS VERIFIED ACCESSIBLE!"
        echo ""
        echo -e "${GREEN}✅ Service Health: $endpoints_passed/$total_endpoints endpoints functional${NC}"
        echo -e "${GREEN}✅ Stack Status: 100% operational${NC}"
        echo -e "${GREEN}✅ Ready for development!${NC}"
        echo ""
    else
        print_header "⚠️  ENDPOINT VERIFICATION ISSUES DETECTED"
        echo ""
        echo -e "${YELLOW}⚠️  Service Health: $endpoints_passed/$total_endpoints endpoints functional${NC}"
        echo -e "${YELLOW}⚠️  Some services may still be starting up...${NC}"
        echo ""
        print_info "Try running './start.sh status' again in a few moments"
        echo ""
    fi
    
    return 0
}

# Function to show service status
show_status() {
    verify_endpoints
    
    echo ""
    print_header "🚀 Ready-to-Use Access Points"
    echo ""
    echo -e "${CYAN}🎨 LangGraph Studio:${NC}  http://localhost:2024"
    echo -e "   ${NC}Build & test agents visually${NC}"
    echo ""
    echo -e "${CYAN}💬 Chat Interface:${NC}     http://localhost:5173"
    echo -e "   ${NC}Interactive agent testing${NC}"
    echo ""
    echo -e "${CYAN}🔍 Qdrant Dashboard:${NC}   http://localhost:6333/dashboard"
    echo -e "   ${NC}Vector database management${NC}"
    echo ""
    echo -e "${CYAN}📈 LangSmith Tracing:${NC}  http://localhost:8000"
    echo -e "   ${NC}Execution monitoring & analytics${NC}"
    echo ""
    echo -e "${CYAN}🐘 PostgreSQL:${NC}        localhost:5432"
    echo -e "   ${NC}Agent persistence & checkpoints${NC}"
    echo ""
    echo -e "${CYAN}� Redis:${NC}             localhost:6379"
    echo -e "   ${NC}Caching & session management${NC}"
    echo ""
    
    print_info "Run './start.sh dev' to start the agent development container"
    print_info "Run './start.sh logs <service>' to view specific service logs"
}

# Function to show logs
show_logs() {
    local service=$1
    if [ -z "$service" ]; then
        print_header "All Service Logs"
        run_compose -p $PROJECT_NAME logs -f
    else
        print_header "Logs for $service"
        run_compose -p $PROJECT_NAME logs -f $service
    fi
}

# Function to start development container
start_dev() {
    print_header "Starting Agent Development Container"
    
    # Check if stack is running
    if ! run_compose -p $PROJECT_NAME ps | grep -q "Up"; then
        print_warning "Main stack doesn't appear to be running"
        print_info "Starting stack first..."
        start_stack
        sleep 5
    fi
    
    print_info "Starting agent development container..."
    
    # Build and run the development container
    docker build -t langgraph-agent-dev ./agent-dev/
    
    docker run -it --rm \
        --name langgraph-agent-dev \
        --network langgraph-network \
        -v "$(pwd)/../config:/config:ro" \
        -v "$(pwd)/../setup:/setup:ro" \
        -v "$(pwd)/../../:/workspace" \
        -p 8888:8888 \
        -e PYTHONPATH="/workspace" \
        langgraph-agent-dev
}

# Function to clean up everything
cleanup() {
    print_header "Cleaning Up LangGraph Stack"
    
    print_info "Stopping and removing containers..."
    run_compose -p $PROJECT_NAME down -v --remove-orphans
    
    print_info "Removing development container if exists..."
    docker rm -f langgraph-agent-dev 2>/dev/null || true
    
    print_info "Removing custom network..."
    docker network rm langgraph-network 2>/dev/null || true
    
    print_success "Cleanup completed!"
}

# Function to update the stack
update_stack() {
    print_header "Updating LangGraph Stack"
    
    print_info "Pulling latest images..."
    run_compose -p $PROJECT_NAME pull
    
    print_info "Rebuilding containers..."
    run_compose -p $PROJECT_NAME up -d --build
    
    print_success "Stack updated successfully!"
}

# Function to backup data
backup_data() {
    print_header "Backing Up Stack Data"
    
    local backup_dir="backups/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    print_info "Creating PostgreSQL backup..."
    run_compose -p $PROJECT_NAME exec -T postgres pg_dumpall -U postgres > "$backup_dir/postgres_backup.sql"
    
    print_info "Creating Qdrant backup..."
    run_compose -p $PROJECT_NAME exec -T qdrant tar -czf - /qdrant/storage > "$backup_dir/qdrant_backup.tar.gz"
    
    print_success "Backup saved to $backup_dir"
}

# Show help
show_help() {
    echo -e "${BLUE}LangGraph Self-Hosted Stack Management${NC}"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  start      Start the LangGraph stack"
    echo "  stop       Stop the LangGraph stack"
    echo "  restart    Restart the LangGraph stack"
    echo "  status     Show service status and URLs"
    echo "  logs       Show logs for all services"
    echo "  logs <service>  Show logs for specific service"
    echo "  dev        Start agent development container"
    echo "  update     Update stack to latest versions"
    echo "  backup     Backup stack data"
    echo "  cleanup    Stop and remove everything"
    echo "  help       Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 start               # Start the stack"
    echo "  $0 logs langgraph-server # Show LangGraph server logs"
    echo "  $0 dev                 # Start development environment"
    echo ""
}

# Main script logic
case "${1:-help}" in
    "start")
        check_prerequisites
        start_stack
        ;;
    "stop")
        stop_stack
        ;;
    "restart")
        stop_stack
        sleep 2
        check_prerequisites
        start_stack
        ;;
    "status")
        show_status
        ;;
    "logs")
        show_logs "$2"
        ;;
    "dev")
        start_dev
        ;;
    "update")
        check_prerequisites
        update_stack
        ;;
    "backup")
        backup_data
        ;;
    "cleanup")
        cleanup
        ;;
    "help"|"--help"|"-h")
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
